.pio_version 0 // only requires PIO version 0

; See also https://github.com/raspberrypi/pico-examples/blob/master/dma/channel_irq/pio_serialiser.pio
;

; This program operates a clock and then reads a bit
; each time the pin goes low
;
; DAT is in pin 0
; CLK is side-set pin 0

.program receiver
.side_set 1 ; Tell the assembler we have one sideset pin
    nop side 1 [1]		; set the clock low and wait
    in pins, 1 side 0 [1]	; shift a bit into the FIFO and set the clock high again.
.wrap

% c-sdk {
static inline void receiver_program_init(PIO pio, uint sm, uint offset, uint pin_dat, uint pin_clk) {

    pio_gpio_init(pio, pin_dat);
    pio_gpio_init(pio, pin_clk);

    pio_sm_config c = receiver_program_get_default_config(offset);

    sm_config_set_in_pins(&c, pin_dat);
    sm_config_set_sideset_pins(&c, pin_clk);

    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << pin_clk));
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << pin_clk), (1u << pin_dat) | (1u << pin_clk));

    sm_config_set_in_shift(
        &c,
        true,  // Shift-to-right
        true,  // Autopush enabled
        32      // Autopush threshold = 8 ???
    );

    // We only send, so disable the RX FIFO to make the TX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

#define SR (4 * 1000 * 1000 /* Hz */)

    uint sampleBitRate = ( SR ) * 4;
    float div = (float)clock_get_hz(clk_sys) / sampleBitRate;
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
}

static inline uint32_t receiver_program_get(PIO pio, uint sm) {
    static int x = 0;
    uint32_t v = pio_sm_get_blocking(pio, sm);
    // if (x ==0) { x = 1; v >>= 1; };
    return v;
}

%}

